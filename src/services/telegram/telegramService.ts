
// Telegram service - CLOUD NATIVE VERSION

import { toast } from 'sonner';

export interface TelegramConfig {
  botToken: string;
  chatId: string;
  isConnected: boolean;
  lastConnected?: number;
}

const TELEGRAM_CONFIG_KEY = 'telegram_config';

/**
 * Get Telegram configuration
 */
export const getTelegramConfig = (): TelegramConfig | null => {
  try {
    const stored = localStorage.getItem(TELEGRAM_CONFIG_KEY);
    if (!stored) return null;
    
    return JSON.parse(stored) as TelegramConfig;
  } catch (error) {
    console.error('Error parsing Telegram config:', error);
    return null;
  }
};

/**
 * Save Telegram configuration
 */
export const saveTelegramConfig = (config: TelegramConfig): void => {
  try {
    const configWithTimestamp = {
      ...config,
      lastConnected: Date.now()
    };
    
    localStorage.setItem(TELEGRAM_CONFIG_KEY, JSON.stringify(configWithTimestamp));
    console.log('Telegram configuration saved successfully');
    toast.success('הגדרות טלגרם נשמרו בהצלחה');
  } catch (error) {
    console.error('Error saving Telegram config:', error);
    toast.error('שגיאה בשמירת הגדרות טלגרם');
  }
};

/**
 * Test Telegram connection - DIRECT CLOUD CONNECTION
 */
export const testTelegramConnection = async (botToken: string, chatId: string): Promise<boolean> => {
  try {
    const testMessage = 'בדיקת חיבור LeviPro - המערכת פעילה!';
    
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: testMessage
      })
    });
    
    if (response.ok) {
      toast.success('החיבור לטלגרם הצליח!');
      return true;
    } else {
      const error = await response.text();
      console.error('Telegram API error:', error);
      toast.error('שגיאה בחיבור לטלגרם');
      return false;
    }
  } catch (error) {
    console.error('Error testing Telegram connection:', error);
    toast.error('שגיאה בבדיקת חיבור טלגרם');
    return false;
  }
};

/**
 * Send trading signal to Telegram - DIRECT CLOUD CONNECTION
 */
export const sendTradingSignal = async (signal: any): Promise<boolean> => {
  try {
    const config = getTelegramConfig();
    if (!config || !config.isConnected) {
      console.warn('Telegram not configured');
      return false;
    }
    
    const message = `
🚀 *LeviPro Trading Signal*

📊 Symbol: ${signal.symbol}
💰 Price: $${signal.price}
📈 Signal: ${signal.action}
⚡ Strength: ${signal.strength}%
🕐 Time: ${new Date().toLocaleString('he-IL')}

*Generated by LeviPro AI Engine*
    `;
    
    const response = await fetch(`https://api.telegram.org/bot${config.botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: config.chatId,
        text: message,
        parse_mode: 'Markdown'
      })
    });
    
    return response.ok;
  } catch (error) {
    console.error('Error sending Telegram signal:', error);
    return false;
  }
};

/**
 * Disconnect from Telegram
 */
export const disconnectTelegram = (): void => {
  localStorage.removeItem(TELEGRAM_CONFIG_KEY);
  console.log('Telegram configuration removed');
  toast.success('התנתקת מטלגרם');
};

/**
 * Check if Telegram is connected
 */
export const isTelegramConnected = (): boolean => {
  const config = getTelegramConfig();
  return !!config && config.isConnected && !!config.botToken && !!config.chatId;
};
