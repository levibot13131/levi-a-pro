
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

interface TradingSignal {
  symbol: string
  price: number
  change24h: number
  signal_type: 'BUY' | 'SELL' | 'HOLD'
  strength: number
  timestamp: string
}

const SYMBOLS = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'BNBUSDT']

async function generateTradingSignals(): Promise<TradingSignal[]> {
  const signals: TradingSignal[] = []
  
  console.log('🚀 LeviPro Trading Engine - Real-time Analysis Started')
  
  for (const symbol of SYMBOLS) {
    try {
      console.log(`📊 Analyzing ${symbol}...`)
      
      // Fetch real-time data from Binance
      const response = await fetch(`https://api.binance.com/api/v3/ticker/24hr?symbol=${symbol}`)
      const data = await response.json()
      
      const price = parseFloat(data.lastPrice)
      const change24h = parseFloat(data.priceChangePercent)
      
      console.log(`💹 ${symbol}: Price=${price}, Change=${change24h}%`)
      
      // Advanced signal generation logic
      let signal_type: 'BUY' | 'SELL' | 'HOLD' = 'HOLD'
      let strength = 50
      
      // Technical analysis logic
      if (change24h > 5) {
        signal_type = 'BUY'
        strength = Math.min(95, 60 + Math.abs(change24h) * 2)
      } else if (change24h < -5) {
        signal_type = 'SELL'
        strength = Math.min(95, 60 + Math.abs(change24h) * 2)
      } else if (change24h > 2) {
        signal_type = 'BUY'
        strength = 55 + Math.abs(change24h) * 5
      } else if (change24h < -2) {
        signal_type = 'SELL'
        strength = 55 + Math.abs(change24h) * 5
      }
      
      // Generate signal only if strength > 60
      if (strength > 60) {
        const signal: TradingSignal = {
          symbol,
          price,
          change24h,
          signal_type,
          strength: Math.round(strength),
          timestamp: new Date().toISOString()
        }
        
        signals.push(signal)
        console.log(`🎯 Signal Generated: ${symbol} - ${signal_type} (${strength}%)`)
        
        // Send to Telegram if configured
        await sendTelegramSignal(signal)
      }
      
    } catch (error) {
      console.error(`Error analyzing ${symbol}:`, error)
    }
  }
  
  console.log(`🎯 Engine Summary: ${signals.length} signals generated from ${SYMBOLS.length} symbols`)
  return signals
}

async function sendTelegramSignal(signal: TradingSignal) {
  try {
    // This would use environment variables in production
    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN')
    const chatId = Deno.env.get('TELEGRAM_CHAT_ID')
    
    if (!botToken || !chatId) {
      console.log('Telegram not configured, skipping notification')
      return
    }
    
    const message = `
🚀 *LeviPro Trading Signal*

📊 Symbol: ${signal.symbol}
💰 Price: $${signal.price}
📈 Signal: ${signal.signal_type}
⚡ Strength: ${signal.strength}%
📊 24h Change: ${signal.change24h.toFixed(2)}%
🕐 Time: ${new Date(signal.timestamp).toLocaleString('he-IL')}

*Generated by LeviPro AI Engine*
    `
    
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown'
      })
    })
    
    console.log(`📱 Telegram signal sent for ${signal.symbol}`)
  } catch (error) {
    console.error('Error sending Telegram signal:', error)
  }
}

serve(async (req) => {
  try {
    const signals = await generateTradingSignals()
    
    return new Response(JSON.stringify({
      success: true,
      signals,
      timestamp: new Date().toISOString(),
      count: signals.length
    }), {
      headers: { "Content-Type": "application/json" },
    })
  } catch (error) {
    console.error('Trading engine error:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    })
  }
})
